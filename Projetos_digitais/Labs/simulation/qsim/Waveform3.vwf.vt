// Copyright (C) 2018  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "09/05/2022 18:44:41"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          Lab1
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Lab1_vlg_vec_tst();
// constants                                           
// general purpose registers
reg A0;
reg A1;
reg A2;
reg A3;
reg B0;
reg B1;
reg B2;
reg B3;
reg Ci;
// wires                                               
wire AFa;
wire AFb;
wire AFc;
wire AFd;
wire AFe;
wire AFf;
wire AFg;
wire BFa;
wire BFb;
wire BFc;
wire BFd;
wire BFe;
wire BFf;
wire BFg;
wire S0Fa;
wire S0Fb;
wire S0Fc;
wire S0Fd;
wire S0Fe;
wire S0Ff;
wire S0Fg;
wire S1Fa;
wire S1Fb;
wire S1Fc;
wire S1Fd;
wire S1Fe;
wire S1Ff;
wire S1Fg;

// assign statements (if any)                          
Lab1 i1 (
// port map - connection between master ports and signals/registers   
	.A0(A0),
	.A1(A1),
	.A2(A2),
	.A3(A3),
	.AFa(AFa),
	.AFb(AFb),
	.AFc(AFc),
	.AFd(AFd),
	.AFe(AFe),
	.AFf(AFf),
	.AFg(AFg),
	.B0(B0),
	.B1(B1),
	.B2(B2),
	.B3(B3),
	.BFa(BFa),
	.BFb(BFb),
	.BFc(BFc),
	.BFd(BFd),
	.BFe(BFe),
	.BFf(BFf),
	.BFg(BFg),
	.Ci(Ci),
	.S0Fa(S0Fa),
	.S0Fb(S0Fb),
	.S0Fc(S0Fc),
	.S0Fd(S0Fd),
	.S0Fe(S0Fe),
	.S0Ff(S0Ff),
	.S0Fg(S0Fg),
	.S1Fa(S1Fa),
	.S1Fb(S1Fb),
	.S1Fc(S1Fc),
	.S1Fd(S1Fd),
	.S1Fe(S1Fe),
	.S1Ff(S1Ff),
	.S1Fg(S1Fg)
);
initial 
begin 
#1000000 $finish;
end 

// Ci
initial
begin
	Ci = 1'b1;
end 

// A3
initial
begin
	repeat(6)
	begin
		A3 = 1'b0;
		A3 = #80000 1'b1;
		# 80000;
	end
	A3 = 1'b0;
end 

// A2
initial
begin
	repeat(12)
	begin
		A2 = 1'b0;
		A2 = #40000 1'b1;
		# 40000;
	end
	A2 = 1'b0;
end 

// A1
always
begin
	A1 = 1'b0;
	A1 = #20000 1'b1;
	#20000;
end 

// A0
always
begin
	A0 = 1'b0;
	A0 = #10000 1'b1;
	#10000;
end 

// B3
initial
begin
	B3 = 1'b0;
end 

// B2
initial
begin
	B2 = 1'b0;
	B2 = #640000 1'b1;
end 

// B1
initial
begin
	B1 = 1'b0;
	B1 = #320000 1'b1;
	B1 = #320000 1'b0;
	B1 = #320000 1'b1;
end 

// B0
initial
begin
	repeat(3)
	begin
		B0 = 1'b0;
		B0 = #160000 1'b1;
		# 160000;
	end
	B0 = 1'b0;
end 
endmodule

